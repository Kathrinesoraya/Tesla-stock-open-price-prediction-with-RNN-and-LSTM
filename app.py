# -*- coding: utf-8 -*-
"""Deep Learning Kelompok 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1InAOwmpkpjrS_560IqAa2yeTaxSGEy3x

## Loading Data
"""
import streamlit as st
import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt

st.title("Loading Data")
data = pd.read_csv("./TSLA.csv")

data

data.info()

#data['Date'] = pd.to_datetime(data['Date'])  # Convert 'Date' column to datetime format
#data.set_index('Date', inplace=True)  # Set 'Date' as the DataFrame index

fig = plt.figure(figsize=(16,6))
plt.title('Open Price History')
plt.plot(data['Open'])
plt.xlabel('Days', fontsize=18)
plt.ylabel('Open Price USD ($)', fontsize=18)
plt.show()
st.pyplot(fig)

"""# Spliting Data as Train and Validation"""

length_data = len(data)     # rows that data has
split_ratio = 0.7           # %70 train + %30 validation
length_train = round(length_data * split_ratio)
length_validation = length_data - length_train
st.write("Data length :", length_data)
st.write("Train data length :", length_train)
st.write("Validation data lenth :", length_validation)

train_data = data[:length_train].iloc[:,:2]
train_data['Date'] = pd.to_datetime(train_data['Date'])  # converting to date time object
train_data

validation_data = data[length_train:].iloc[:,:2]
validation_data['Date'] = pd.to_datetime(validation_data['Date'])  # converting to date time object
validation_data

"""## Creating Train Dataset from Train split"""

dataset_train = train_data.Open.values
dataset_train.shape

# Change 1d array to 2d array
dataset_train = np.reshape(dataset_train, (-1,1))
dataset_train.shape

"""## Normalization / Feature Scaling"""

#Dataset values will be in between 0 and 1 after scaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range = (0,1))


# scaling dataset
dataset_train_scaled = scaler.fit_transform(dataset_train)

dataset_train_scaled.shape

fig,ax = plt.subplots(figsize = (16,6))
plt.plot(dataset_train_scaled)
plt.xlabel("Days as 1st, 2nd, 3rd..")
plt.ylabel("Open Price")
plt.show()
st.pyplot(fig)

"""## Creating X_train and y_train from Train data


"""

X_train = []
y_train = []

time_step = 50

for i in range(time_step, length_train):
    X_train.append(dataset_train_scaled[i-time_step:i,0])
    y_train.append(dataset_train_scaled[i,0])

# convert list to array
X_train, y_train = np.array(X_train), np.array(y_train)

st.write("Shape of X_train before reshape :",X_train.shape)
st.write("Shape of y_train before reshape :",y_train.shape)

"""## Reshape"""

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1],1))
y_train = np.reshape(y_train, (y_train.shape[0],1))

st.write("Shape of X_train after reshape :",X_train.shape)
st.write("Shape of y_train after reshape :",y_train.shape)

"""Shape of X_train :831 x 50 x 1

That means we have 831 rows, each row has 50 rows and 1 column

Lets check the first row: it has 50 rows (open prices of 49 days)
"""

X_train[0]

"""Check the first item in y_train
It is the price of 50th day
"""

y_train[0]

"""Creating RNN model"""

# importing libraries
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout

# initializing the RNN
regressor = Sequential()

# adding first RNN layer and dropout regulatization
regressor.add(
    SimpleRNN(units = 50,
              activation = "tanh",
              return_sequences = True,
              input_shape = (X_train.shape[1],1))
             )

regressor.add(
    Dropout(0.2)
             )


# adding second RNN layer and dropout regulatization

regressor.add(
    SimpleRNN(units = 50,
              activation = "tanh",
              return_sequences = True)
             )

regressor.add(
    Dropout(0.2)
             )

# adding third RNN layer and dropout regulatization

regressor.add(
    SimpleRNN(units = 50,
              activation = "tanh",
              return_sequences = True)
             )

regressor.add(
    Dropout(0.2)
             )

# adding fourth RNN layer and dropout regulatization

regressor.add(
    SimpleRNN(units = 50)
             )

regressor.add(
    Dropout(0.2)
             )

# adding the output layer
regressor.add(Dense(units = 1))

# compiling RNN
regressor.compile(
    optimizer = "adam",
    loss = "mean_squared_error",
    metrics = ["accuracy"])

# fitting the RNN
history = regressor.fit(X_train, y_train, epochs = 50, batch_size = 32)

"""## Evaluating Model"""

# Losses
history.history["loss"]

# Plotting Loss vs Epochs
fig = plt.figure(figsize =(10,7))
plt.plot(history.history["loss"])
plt.xlabel("Epochs")
plt.ylabel("Losses")
plt.title("Simple RNN model, Loss vs Epoch")
plt.show()
st.pyplot(fig)

# Plotting Accuracy vs Epochs
fig = plt.figure(figsize =(10,5))
plt.plot(history.history["accuracy"])
plt.xlabel("Epochs")
plt.ylabel("Accuracies")
plt.title("Simple RNN model, Accuracy vs Epoch")
plt.show()
st.pyplot(fig)

"""## Model predictions for train data"""

y_pred = regressor.predict(X_train)  # predictions
y_pred = scaler.inverse_transform(y_pred) # scaling back from 0-1 to original
y_pred.shape

y_train = scaler.inverse_transform(y_train) # scaling back from 0-1 to original
y_train.shape

# visualisation
fig = plt.figure(figsize = (30,10))
plt.plot(y_pred, color = "b", label = "Prediction" )
plt.plot(y_train, color = "g", label = "Trained Data")
plt.xlabel("Days")
plt.ylabel("Open price")
plt.title("Simple RNN model, Predictions with input X_train vs y_train")
plt.legend()
plt.show()
st.pyplot(fig)

"""## Creating Test Dataset from Validation Data

Converting array and scaling
"""

dataset_validation = validation_data.Open.values  # getting "open" column and converting to array
dataset_validation = np.reshape(dataset_validation, (-1,1))  # converting 1D to 2D array
scaled_dataset_validation =  scaler.fit_transform(dataset_validation)  # scaling open values to between 0 and 1
st.write("Shape of scaled validation dataset :",scaled_dataset_validation.shape)

""" Creating X_test and y_test"""

# Creating X_test and y_test
X_test = []
y_test = []

for i in range(time_step, length_validation):
    X_test.append(scaled_dataset_validation[i-time_step:i,0])
    y_test.append(scaled_dataset_validation[i,0])

"""Converting to array"""

# Converting to array
X_test, y_test = np.array(X_test), np.array(y_test)
st.write("Shape of X_test before reshape :",X_test.shape)
st.write("Shape of y_test before reshape :",y_test.shape)

"""Reshape"""

X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))  # reshape to 3D array
y_test = np.reshape(y_test, (-1,1))  # reshape to 2D array

st.write("Shape of X_test after reshape :",X_test.shape)
st.write("Shape of y_test after reshape :",y_test.shape)

"""## Model prediction with Validation Data"""

# predictions with X_test data
y_pred_of_test = regressor.predict(X_test)
# scaling back from 0-1 to original
y_pred_of_test = scaler.inverse_transform(y_pred_of_test)
st.write("Shape of y_pred_of_test :",y_pred_of_test.shape)

# visualisation
fig = plt.figure(figsize = (30,10))
plt.plot(y_pred_of_test, label = "y_pred_of_test", c = "orange")
plt.plot(scaler.inverse_transform(y_test), label = "y_test", c = "g")
plt.xlabel("Days")
plt.ylabel("Open price")
plt.title("Simple RNN model, Prediction with input X_test vs y_test")
plt.legend()
plt.show()
st.pyplot(fig)

# Visualisation
fig, ax = plt.subplots(figsize =(30,12))
plt.plot(train_data.Date, train_data.Open, label = "train_data", color = "b")
plt.plot(validation_data.Date, validation_data.Open, label = "validation_data", color = "g")
plt.plot(train_data.Date.iloc[time_step:], y_pred, label = "y_pred", color = "r")
plt.plot(validation_data.Date.iloc[time_step:], y_pred_of_test, label = "y_pred_of_test", color = "orange")
plt.xlabel("Days")
plt.ylabel("Open price")
plt.title("Simple RNN model, Train-Validation-Prediction")
plt.legend()
plt.show()
st.pyplot(fig)

"""## Creating LSTM Model"""

y_train = scaler.fit_transform(y_train)

from keras.layers import LSTM

model_lstm = Sequential()
model_lstm.add(
    LSTM(64,return_sequences=True,input_shape = (X_train.shape[1],1))) #64 lstm neuron block
model_lstm.add(
    LSTM(64, return_sequences= False))
model_lstm.add(Dense(32))
model_lstm.add(Dense(1))
model_lstm.compile(loss = "mean_squared_error", optimizer = "adam", metrics = ["accuracy"])
history2 = model_lstm.fit(X_train, y_train, epochs = 10, batch_size = 10)

"""Evaluating LSTM Model"""

fig = plt.figure(figsize =(10,5))
plt.plot(history2.history["loss"])
plt.xlabel("Epochs")
plt.ylabel("Losses")
plt.title("LSTM model, Loss vs Epoch")
plt.show()
st.pyplot(fig)

"""## Model Prediction using Training Data"""

fig, ax = plt.subplots(figsize =(30,12))
plt.plot(scaler.inverse_transform(model_lstm.predict(X_train)))
plt.plot(scaler.inverse_transform(y_train), label = "y_train", color = "g")
plt.xlabel("Days")
plt.ylabel("Open price")
plt.title("LSTM model, Predictions with input X_train vs y_train")
plt.legend()
plt.show()
st.pyplot(fig)

"""## Model Prediction using Validation Data"""

fig, ax = plt.subplots(figsize =(30,12))
plt.plot(scaler.inverse_transform(model_lstm.predict(X_test)), label = "y_pred_of_test", c = "orange" )
plt.plot(scaler.inverse_transform(y_test), label = "y_test", color = "g")
plt.xlabel("Days")
plt.ylabel("Open price")
plt.title("LSTM model, Predictions with input X_test vs y_test")
plt.legend()
plt.show()
st.pyplot(fig)

"""## Future price prediction"""

data.iloc[-1]

"""We can predict the open price for the day after 10/13/2023--> for 10/14/2023.
We will use last 50 days Open price as input of our model for this prediction
Let us prepare it:
"""

X_input = data.iloc[-time_step:].Open.values               # getting last 50 rows and converting to array
X_input = scaler.fit_transform(X_input.reshape(-1,1))      # converting to 2D array and scaling
X_input = np.reshape(X_input, (1,50,1))                    # reshaping : converting to 3D array
st.write("Shape of X_input :", X_input.shape)
X_input

simple_RNN_prediction = scaler.inverse_transform(regressor.predict(X_input))
LSTM_prediction = scaler.inverse_transform(model_lstm.predict(X_input))
st.write("Simple RNN, Open price prediction for 10/14/2023      :", simple_RNN_prediction[0,0])
st.write("LSTM prediction, Open price prediction for 10/14/2023 :", LSTM_prediction[0,0])